apply plugin: 'java'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'net.ltgt.apt'
apply plugin: 'com.github.j2objccontrib.j2objcgradle'
apply plugin: 'jacoco'
apply from: '../dependencies.gradle'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkDir = properties.getProperty('sdk.dir')

repositories {
    maven { url "$sdkDir/extras/android/m2repository" }
}

retrolambda {
    oldJdk System.getenv("JAVA7_HOME")
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    '**/*AutoValue*.class', // AutoValue generated classes
                    '**/*Lambda*',  // Generated lambdas
                    '**/*_Factory*', // Dagger2 generated factories
                    '**/*Module_*Factory*' // Dagger2 generated factories
            ])
        })
    }
}

check.dependsOn jacocoTestReport

dependencies {

    compile 'com.google.code.gson:gson:2.4'
    compile 'com.google.code.findbugs:jsr305:3.0.1'

    compile files('libs/rxjava-1.1.8.jar')
    j2objcTranslation files('libs/rxjava-1.1.8-sources.jar')
    compile 'com.annimon:stream:1.0.9'
    compile "com.android.support:support-annotations:$SUPPORT_VERSION"

    // use api as provided-only, we don't need it in jar
    compileOnly "org.slf4j:slf4j-api:1.7.21"
    /* For translation, use our custom slf4j-simple
    j2objc works only with java files, but in slf4j api sources, there is a StaticLoggerBinder class
    that is stripped during packaging. (they need it to compile classes, but in runtime they want
    for actual implementation to be used instead).
    The thing is, j2objc doesn't know about this, so if we tell it to translate slf4j-api sources
    it would generate translation for this fake class.
    So, in order to circumvent this, I've made a custom version of slf4j-simple that is a mash-up
    of original lib and api with StaticLoggerBinder from slf4-simple
    We don't need it for actual jar, only for ios translation.
    */
    j2objcTranslationClosure files('libs/slf4j-simple-1.7.21-sources.jar')
    testCompile project(":slf4j-simple")

    // Only annotations are used
    compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.okhttp3:okhttp:$OKHTTP_VERSION"


    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    apt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"

    compile "com.google.auto.value:auto-value:$AUTOVALUE_VERSION"
    apt "com.google.auto.value:auto-value:$AUTOVALUE_VERSION"
    apt 'com.gabrielittner.auto.value:auto-value-with:1.0.0-rc1'

    testCompile "org.mockito:mockito-core:$MOCKITO_VERSION"
    compile "org.hamcrest:hamcrest-all:$HAMCREST_VERSION"
    testCompile "junit:junit:$JUNIT_VERSION"

}

j2objcConfig {
    testPattern {
        // j2objc-gradle plugin can't differentiate between tests and simple classes
        exclude '**/RxJavaTestRule.java'
    }
    j2objcVersion "1.1"
    autoConfigureDeps true
    supportedArchs = ['ios_i386', 'ios_x86_64'] //ios_x86_64

    generatedSourceDirs "build/generated/source/apt/main"
    translateArgs "-source", "1.8", "--doc-comments", "--swift-friendly"
    translateArgs "--prefixes", "src/main/resources/prefixes.properties"
    //  translateArgs "--dead-code-report", "usage.txt"

    finalConfigure()
}

j2objcCycleFinder {
    enabled = true
}