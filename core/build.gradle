apply plugin: 'java'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'net.ltgt.apt'
apply plugin: 'com.github.j2objccontrib.j2objcgradle'
apply plugin: 'jacoco'
apply from: '../dependencies.gradle'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkDir = properties.getProperty('sdk.dir')

repositories {
    maven { url "$sdkDir/extras/android/m2repository" }
}

retrolambda {
    oldJdk System.getenv("JAVA7_HOME")
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    '**/*AutoValue*.class', // AutoValue generated classes
                    '**/*Lambda*',  // Generated lambdas
                    '**/*_Factory*', // Dagger2 generated factories
                    '**/*Module_*Factory*' // Dagger2 generated factories
            ])
        })
    }
}

check.dependsOn jacocoTestReport

dependencies {

    compile 'com.google.code.gson:gson:2.4'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
//    compile 'io.reactivex:rxjava:1.1.5'
//    //compile 'com.squareup.retrofit2:retrofit:2.1.0'
//    compile files('libs/retrofit-2.1.0.jar')
//    j2objcTranslation files('libs/retrofit-2.1.0-sources.jar')
//    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
//    compile 'com.squareup.retrofit2:retrofit-mock:2.1.0'
//    compile ('com.squareup.retrofit2:adapter-rxjava:2.1.0') {
//        exclude group: 'io.reactivex', module: 'rxjava'
//    }
//
//    //compile 'com.squareup.okhttp3:okhttp:3.4.1'
//    compile files('libs/okhttp-3.4.1.jar')
//    j2objcTranslation files('libs/okhttp-3.4.1-sources.jar')
//    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
//    //compile  'com.squareup.okio:okio:1.9.0'
//    compile files('libs/okio-1.9.0.jar')
//    j2objcTranslation files('libs/okio-1.9.0-sources.jar')
//    compile group: 'org.codehaus.mojo', name: 'animal-sniffer-annotations', version: '1.15'
  //  compile group: 'com.google.android', name: 'android', version: '4.1.1.4'

//    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'

    //compile 'io.reactivex:rxjava:1.1.5'
    compile files('libs/rxjava-1.1.8.jar')
    j2objcTranslation files('libs/rxjava-1.1.8-sources.jar')
    compile 'com.annimon:stream:1.0.9'
    compile dep.SUPPORT_ANNOTATION
   // compile 'org.slf4j:slf4j-api:1.7.21'

    // Only annotations are used
    compile dep.RETROFIT


    compile "com.google.auto.value:auto-value:1.2"
    apt "com.google.auto.value:auto-value:1.2"
    apt 'com.gabrielittner.auto.value:auto-value-with:1.0.0-rc1'

    compile dep.DAGGER
    apt dep.DAGGER_COMPILER

    testCompile 'org.mockito:mockito-core:1.10.19'
//    testCompile project(":j2objc-hamcrest")
    compile dep.HAMCREST
    testCompile dep.JUNIT
   // compile 'org.slf4j:slf4j-simple:1.7.21'
//    testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
//    j2objcTestTranslation 'com.squareup.okhttp3:mockwebserver:3.4.1:sources'
//    j2objcTestTranslation 'com.squareup.okhttp3:okhttp-ws:3.4.1:sources'
//    j2objcTestTranslation 'org.bouncycastle:bcprov-jdk15on:1.50:sources'

}

j2objcConfig {
    testPattern {
        // j2objc-gradle plugin can't differentiate between tests and simple classes
        exclude '**/RxJavaTestRule.java'
        exclude '**/CustomGsonConverterFactoryTest.java'
    }
    j2objcVersion "1.1"
    autoConfigureDeps true
    supportedArchs = ['ios_x86_64']

    generatedSourceDirs "build/generated/source/apt/main"
    translateArgs "-source", "1.8", "--doc-comments", "--swift-friendly"
  //  translateArgs "--dead-code-report", "usage.txt"
    //xcodeProjectDir '../ios/Flashcards'  //  suggested directory name
    //xcodeTargetsIos 'Flashcards' //, 'FlashcardsTests'  // replace with your iOS targets

    finalConfigure()
}

j2objcPodspec.doLast {
    println('Modifying generated podspecs to be able to run pod install')
    [getPodspecDebug(), getPodspecRelease()].asList().each {
        File podspec = it

        String text = podspec.text.replace(
                "Pod::Spec.new do |spec|",
                '''Pod::Spec.new do |spec|
  spec.authors = 'authors'
  spec.license = 'license'
  spec.homepage = 'homepage'
  spec.source = { :git => 'https://github.com/TriangleLeft/Flashcards.git' }''')
        podspec.write(text)
    }
}

task makeFramework {
    println 'hello'
    doLast {
        println 'last'
    }
}